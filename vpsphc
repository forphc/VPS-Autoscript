#!/bin/bash
# shellcheck disable=2164,2129

PUBLIC_IP=$(wget -4qO- ipinfo.io/ip);
PRIVATE_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1);
NIC=$(ip -4 route ls | sed -nE '/default/ {s_.*dev.([^ ]*).*_\1_p;q}');
SERVER=$(wget -4qO- ipinfo.io/org | cut -d' ' -f2-);
REGION=$(wget -4qO- ipinfo.io/region | sed -e "s/ /-/g");
DATE=$(date +%m-%d-%Y);
GIST="https://gist.githubusercontent.com/forphc/16f95185e2647d361c6ee07d690765af/raw/"
server_dir="/etc/openvpn/server"
client_dir="/etc/openvpn/client"


err ()
{
	printf '\n%s\n' "To avoid errors, please install on a fresh vps." && sleep 2 && read -n 1 -s -r -p "Press any key to end " && rm -f vpsphc && exit 1
}

_dropbear ()
{
	apt install -y dropbear
	sed -i "s/NO_START=.*/NO_START=0/" /etc/default/dropbear
	sed -i "s/DROPBEAR_PORT=.*/DROPBEAR_PORT=143/" /etc/default/dropbear
	sed -i 's%DROPBEAR_BANNER=.*%DROPBEAR_BANNER="/etc/banner"%' /etc/default/dropbear
	: > /etc/banner
	systemctl restart dropbear
	if ! systemctl status dropbear &> /dev/null; then
		printf '\n%s\n' "Failed to install Dropbear" && err
	fi
}

_stunnel4 ()
{
	apt install -y stunnel4
	curl -skL "$GIST/stunnel.conf" -o /etc/stunnel/stunnel.conf
	curl -skL "$GIST/stunnel.pem" -o /etc/stunnel/stunnel.pem
	sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
	systemctl restart stunnel4
	if ! systemctl status stunnel4 &> /dev/null; then
		printf '\n%s\n' "Failed to install Stunnel4" && err
	fi
}

_squid ()
{
	apt install -y squid
	mv /etc/squid/squid.conf /etc/squid/squid.conf.bak
	curl -skL "$GIST/squid.conf" -o /etc/squid/squid.conf
	sed -i "s/xxxx/$PUBLIC_IP/g" /etc/squid/squid.conf
	systemctl restart squid
	if ! systemctl status squid &> /dev/null; then
		printf '\n%s\n' "Failed to install Squid" && err
	fi
}

_openvpn ()
{
	apt install -y gnupg
	os_release=$(sed -nE '/VERSION_CODENAME=/ {s_.*=(.*)_\1_p;q}' /etc/os-release)
	wget -q -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
	printf "deb http://build.openvpn.net/debian/openvpn/stable %s main" "$os_release" > /etc/apt/sources.list.d/openvpn-aptrepo.list
	apt update
	apt install -y openvpn openssl ca-certificates

	[[ -d /etc/openvpn/easy-rsa/ ]] && rm -rf /etc/openvpn/easy-rsa/
	
	mkdir -p /etc/openvpn/easy-rsa/phc-easyrsa/
	curl -skL "https://raw.githubusercontent.com/forphc/VPS-Autoscript/main/phc-easyrsa.zip" -o /etc/openvpn/easy-rsa/phc-easyrsa/phc-easyrsa.zip
	cd /etc/openvpn/easy-rsa/phc-easyrsa/
	unzip -q phc-easyrsa.zip
	cp pki/ca.crt pki/private/ca.key "pki/issued/server.crt" "pki/private/server.key" /etc/openvpn
	cd ~
	curl -skL "$GIST/server_tcp.conf" -o "$server_dir"/server_tcp.conf
	printf "\nplugin %s /etc/pam.d/login" "$(find / -name openvpn-plugin-auth-pam.so)" >> "$server_dir"/server_tcp.conf
	curl -skL "$GIST/server_udp.conf" -o "$server_dir"/server_udp.conf
	printf "\nplugin %s /etc/pam.d/login" "$(find / -name openvpn-plugin-auth-pam.so)" >> "$server_dir"/server_udp.conf
	curl -skL "$GIST/client_tcp.ovpn" -o "$client_dir"/client_tcp.ovpn
	printf '\n<ca>\n' >> "$client_dir"/client_tcp.ovpn
	cat /etc/openvpn/easy-rsa/phc-easyrsa/pki/ca.crt >> "$client_dir"/client_tcp.ovpn
	printf '</ca>' >> "$client_dir"/client_tcp.ovpn

	BUILDVER=$(openvpn --version | grep "^OpenVPN" | awk '{print $2}')
	SQUIDPORT=$(netstat -tlpn | grep -i 'squid' | awk '{print $4}' | sed -e 's/.*://' | head -1)
	sed -i "s/xxxx/$PUBLIC_IP/g" "$client_dir"/client_tcp.ovpn
	sed -i "s/SERVER&LOC/$SERVER - $REGION/" "$client_dir"/client_tcp.ovpn
	sed -i "s/DATETODAY/$DATE/g" "$client_dir"/client_tcp.ovpn
	sed -i "s/BUILD/$BUILDVER/g" "$client_dir"/client_tcp.ovpn
	sed -i "s/squidport/$SQUIDPORT/g" "$client_dir"/client_tcp.ovpn

	curl -skL "$GIST/client_udp.ovpn" -o "$client_dir"/client_udp.ovpn
	printf '\n%s\n' '<ca>' >> "$client_dir"/client_udp.ovpn
	cat /etc/openvpn/easy-rsa/phc-easyrsa/pki/ca.crt >> "$client_dir"/client_udp.ovpn
	printf '%s' '</ca>' >> "$client_dir"/client_udp.ovpn
	sed -i "s/xxxx/$PUBLIC_IP/g" "$client_dir"/client_udp.ovpn
	sed -i "s/SERVER&LOC/$SERVER - $REGION/" "$client_dir"/client_udp.ovpn
	sed -i "s/DATETODAY/$DATE/g" "$client_dir"/client_udp.ovpn
	sed -i "s/BUILD/$BUILDVER/g" "$client_dir"/client_udp.ovpn

	mkdir -p /var/log/openvpn

	printf 1 > /proc/sys/net/ipv4/ip_forward
	printf 'net.ipv4.ip_forward=1' >/etc/sysctl.d/99-openvpn.conf
	sysctl -p &> /dev/null
	
	for action in enable restart; do
		if ! systemctl "$action" openvpn-server@server_tcp.service &> /dev/null; then
			printf '\n%s\n' "Failed to install OpenVPN" && err
		fi
		if ! systemctl "$action" openvpn-server@server_udp.service &> /dev/null; then
			printf '\n%s\n' "Failed to install OpenVPN" && err
		fi
	done
}

_apache ()
{
	curl -skL "$GIST/apache2.sh" -o /tmp/apache2.sh && chmod +x /tmp/apache2.sh && bash /tmp/apache2.sh
	if ! systemctl status apache2 &> /dev/null; then
		printf '\n%s\n' "Failed to install Apache2" && err
	fi
}

_ws()
{
	apt install python -y
	curl -skL "$GIST/startnoload" -o /usr/local/sbin/startnoload && chmod +x /usr/local/sbin/startnoload
}


_webmin ()
{
	apt-get install apt-transport-https gnupg2 libxml-parser-perl -y
	printf "deb https://download.webmin.com/download/repository sarge contrib" > /etc/apt/sources.list.d/webmin.list
	curl -s https://download.webmin.com/jcameron-key.asc | apt-key add -
	apt update
	apt install webmin -y
	sed -i "s/ssl=1/ssl=0/" /etc/webmin/miniserv.conf
	systemctl restart webmin
	if ! systemctl status webmin &> /dev/null; then
		printf '\n%s\n' "Failed to install Webmin" && err
	fi
}


_badvpn ()
{
	curl -skL "https://www.dropbox.com/s/g3ggj96itbqybd6/badvpn-udpgw?dl=0" -o /usr/local/bin/badvpn-udpgw 
	chmod +x /usr/local/bin/badvpn-udpgw
	curl -skL "$GIST/badvpn-udpgw.service" -o /lib/systemd/system/badvpn-udpgw.service
	systemctl daemon-reload
	systemctl enable badvpn-udpgw &> /dev/null
	systemctl start badvpn-udpgw
}

_fail2ban ()
{
	apt install -y fail2ban &> /dev/null
	cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local
	cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
	systemctl restart fail2ban
}

_menu_scripts ()
{
	curl -skL "https://raw.githubusercontent.com/forphc/VPS-Autoscript/main/menu.zip" -o /tmp/menu.zip
	cp /tmp/menu.zip /usr/local/sbin/
	cd /usr/local/sbin/
	unzip -q menu.zip
	cd ~
	chmod -R 755 /usr/local/sbin
}

_misc ()
{
	# Limit access of users
	printf '%s\n%s' "/bin/false" "/usr/sbin/nologin" >> /etc/shells
	
	# Set timezone to GMT+8 PHST
	timedatectl set-timezone Asia/Manila

	# Disable IPv6
	cat >> /etc/sysctl.d/99-sysctl.conf <<-END
	net.ipv6.conf.all.disable_ipv6 = 1
	net.ipv6.conf.default.disable_ipv6 = 1
	net.ipv6.conf.lo.disable_ipv6 = 1
	net.ipv6.conf.eth0.disable_ipv6 = 1
	END

	# Add neofetch
	cat > /etc/profile.d/login.sh <<-END
	clear
	neofetch
	END

	# Cron
	mkdir /etc/phc
	curl -skL "$GIST/delexp.sh" -o /etc/phc/delexp.sh
	chmod +x /etc/phc/delexp.sh
	crontab -l > mycron
	printf '%s\n%s\n%s\n\n' "SHELL=/bin/bash" "PATH=/bin:/sbin:/usr/bin:/usr/sbin" "0 1 * * * /bin/bash /etc/phc/delexp.sh >/dev/null 2>&1" >> mycron
	crontab mycron
	rm mycron
}

_iptables ()
{
	apt install -y iptables iptables-persistent
	curl -skL "$GIST/rules.v4" -o /etc/iptables/rules.v4
	sed -i "s/xxxx/$PUBLIC_IP/g" /etc/iptables/rules.v4
	sed -i "s/yyyy/$PRIVATE_IP/g" /etc/iptables/rules.v4
	sed -i "s/CCC/$NIC/g" /etc/iptables/rules.v4
	systemctl daemon-reload
	iptables-restore < /etc/iptables/rules.v4
	netfilter-persistent save &> /dev/null
	systemctl enable netfilter-persistent &> /dev/null
}

install_all ()
{
	_dropbear
	_stunnel4
	_squid
	_openvpn
	_apache
	_ws
	_webmin
	_badvpn
	_fail2ban
	_menu_scripts
	_misc
	_iptables
}

_start ()
{
	clear
	printf '\n%s\n' "Proceed installation?"

	select option in YES NO
	do
		case $option in
			YES)
				clear
				t1=$(date +%s)
				export DEBIAN_FRONTEND=noninteractive
				apt clean
				apt update
				apt autoremove --fix-missing -y -f
				apt upgrade -y -f
				apt install -y curl net-tools zip unzip vnstat neofetch
				install_all
				break
				;;
			NO)
				printf "Cancelled, exiting..." && sleep 3
				clear && exit
				break
				;;
		esac
	done
}


check_system ()
{
	OS_RELEASE_ID=$(sed -nE '/^ID=/ {s_.*=(.*)_\1_g;s_\"__g;p}' /etc/os-release)
	OS_RELEASE_VERSION_ID=$(sed -nE '/VERSION_ID=/ {s_.*=(.*)_\1_g;s_\"__g;p}' /etc/os-release)

	SUPPORTED=false
	if [[ "${OS_RELEASE_ID}" =~ ubuntu|debian ]] && [[ "${OS_RELEASE_VERSION_ID}" =~ 9|10|18\.04|20\.04 ]]; then
		SUPPORTED=true
	fi

	if [[ "${SUPPORTED}" != "true" ]]; then
		printf '%s\n' "OS distribution not supported by this script."
		exit 1
	else
		_start
	fi
}

# Verify root
if [[ "$(id -u)" -eq 0 ]]; then
	check_system
else
	printf '%s\n' "You must be logged in as root before running this script."
	exit 1
fi


# Done
t2=$(date +%s)
tf=$(( t2 - t1 ))

while IFS= read -r iter; do
	printf '%b\n' "${iter}"
done <<-EOF

Installation success.
Time taken: \033[1;32m $(date -d@$tf +%Mmin:%Ssec) \033[0m
Access management panel using command: \033[1;32mmenu\033[0m
Please reboot your system using command, \033[1;32mreboot\033[0m

EOF

read -n 1 -s -r -p "Press any key to end"
# clean_up
for clean in /tmp/apache2.sh /tmp/menu.zip vpsphc; do
	[[ -e "$clean" ]] && rm -f "$clean"
done
exit 0
